{"remainingRequest":"/Users/choijihyeon/IdeaProjects/trade_bot/node_modules/babel-loader/lib/index.js!/Users/choijihyeon/IdeaProjects/trade_bot/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/choijihyeon/IdeaProjects/trade_bot/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/choijihyeon/IdeaProjects/trade_bot/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/choijihyeon/IdeaProjects/trade_bot/src/App.vue","mtime":1633525733266},{"path":"/Users/choijihyeon/IdeaProjects/trade_bot/node_modules/cache-loader/dist/cjs.js","mtime":1633448507444},{"path":"/Users/choijihyeon/IdeaProjects/trade_bot/node_modules/babel-loader/lib/index.js","mtime":1631533208843},{"path":"/Users/choijihyeon/IdeaProjects/trade_bot/node_modules/cache-loader/dist/cjs.js","mtime":1633448507444},{"path":"/Users/choijihyeon/IdeaProjects/trade_bot/node_modules/vue-loader/lib/index.js","mtime":1633448521452}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IFN0b21wIGZyb20gJ3dlYnN0b21wLWNsaWVudCc7CmltcG9ydCBTb2NrSlMgZnJvbSAnc29ja2pzLWNsaWVudCc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnQXBwJywKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdXNlck5hbWU6ICIiLAogICAgICBtZXNzYWdlOiAiIiwKICAgICAgcmVjdkxpc3Q6IFtdCiAgICB9OwogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMuY29ubmVjdCgpOwogIH0sCiAgY29tcG9uZW50czoge30sCiAgbWV0aG9kczogewogICAgc2VuZE1lc3NhZ2U6IGZ1bmN0aW9uIHNlbmRNZXNzYWdlKGUpIHsKICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMTMgJiYgdGhpcy51c2VyTmFtZSAmJiB0aGlzLm1lc3NhZ2UpIHsKICAgICAgICB0aGlzLnNlbmQoKTsKICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnJzsKICAgICAgfQogICAgfSwKICAgIHNlbmQ6IGZ1bmN0aW9uIHNlbmQoKSB7CiAgICAgIGNvbnNvbGUubG9nKCJTZW5kIG1lc3NhZ2UgOiAiLmNvbmNhdCh0aGlzLm1lc3NhZ2UpKTsKCiAgICAgIGlmICh0aGlzLnN0b21wQ2xpZW50ICYmIHRoaXMuc3RvbXBDbGllbnQuY29ubmVjdGVkKSB7CiAgICAgICAgdmFyIG1zZyA9IHsKICAgICAgICAgIHVzZXJuYW1lOiB0aGlzLnVzZXJuYW1lLAogICAgICAgICAgY29udGVudDogdGhpcy5tZXNzYWdlCiAgICAgICAgfTsKICAgICAgICB0aGlzLnN0b21wQ2xpZW50LnNlbmQoIi9yZWNlaXZlIiwgSlNPTi5zdHJpbmdpZnkobXNnKSk7CiAgICAgIH0KICAgIH0sCiAgICBjb25uZWN0OiBmdW5jdGlvbiBjb25uZWN0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHNlcnZlclVSTCA9ICJodHRwOi8vbG9jYWxob3N0OjgwODAiOwogICAgICB2YXIgc29ja2V0ID0gbmV3IFNvY2tKUyhzZXJ2ZXJVUkwpOwogICAgICB0aGlzLnN0b21wQ2xpZW50ID0gU3RvbXAub3Zlcihzb2NrZXQpOwogICAgICBjb25zb2xlLmxvZygiXHVDMThDXHVDRjEzIFx1QzVGMFx1QUNCMFx1Qzc0NCBcdUMyRENcdUIzQzRcdUQ1NjlcdUIyQzhcdUIyRTQuIFx1QzExQ1x1QkM4NCBcdUM4RkNcdUMxOEM6ICIuY29uY2F0KHNlcnZlclVSTCkpOwogICAgICB0aGlzLnN0b21wQ2xpZW50LmNvbm5lY3Qoe30sIGZ1bmN0aW9uIChmcmFtZSkgewogICAgICAgIC8v7IaM7LyTIOyXsOqysCDshLHqs7UKICAgICAgICBjb25zb2xlLmxvZygn7IaM7LyTIOyXsOqysCDshLHqs7UnLCBmcmFtZSk7CgogICAgICAgIF90aGlzLnN0b21wQ2xpZW50LnN1YnNjcmliZSgiL3NlbmQiLCBmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygn6rWs64+F7Jy866GcIOuwm+ydgCDrqZTsi5zsp4AnLCByZXMuYm9keSk7CgogICAgICAgICAgX3RoaXMucmVjdkxpc3QucHVzaChKU09OLnBhcnNlKHJlcy5ib2R5KSk7CiAgICAgICAgfSk7CiAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIGNvbnNvbGUubG9nKCfshozsvJMg7Jew6rKwIOyLpO2MqCcsIGVycm9yKTsKICAgICAgICBfdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTsKICAgICAgfSk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;AAYA,OAAA,KAAA,MAAA,iBAAA;AACA,OAAA,MAAA,MAAA,eAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,EADA;AAEA,MAAA,OAAA,EAAA,EAFA;AAGA,MAAA,QAAA,EAAA;AAHA,KAAA;AAKA,GARA;AASA,EAAA,OATA,qBASA;AACA,SAAA,OAAA;AACA,GAXA;AAYA,EAAA,UAAA,EAAA,EAZA;AAcA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,uBACA,CADA,EACA;AACA,UAAA,CAAA,CAAA,OAAA,KAAA,EAAA,IAAA,KAAA,QAAA,IAAA,KAAA,OAAA,EAAA;AACA,aAAA,IAAA;AACA,aAAA,OAAA,GAAA,EAAA;AACA;AACA,KANA;AAOA,IAAA,IAPA,kBAOA;AACA,MAAA,OAAA,CAAA,GAAA,0BAAA,KAAA,OAAA;;AACA,UAAA,KAAA,WAAA,IAAA,KAAA,WAAA,CAAA,SAAA,EAAA;AACA,YAAA,GAAA,GAAA;AACA,UAAA,QAAA,EAAA,KAAA,QADA;AAEA,UAAA,OAAA,EAAA,KAAA;AAFA,SAAA;AAIA,aAAA,WAAA,CAAA,IAAA,CAAA,UAAA,EAAA,IAAA,CAAA,SAAA,CAAA,GAAA,CAAA;AACA;AACA,KAhBA;AAiBA,IAAA,OAjBA,qBAiBA;AAAA;;AACA,UAAA,SAAA,GAAA,uBAAA;AACA,UAAA,MAAA,GAAA,IAAA,MAAA,CAAA,SAAA,CAAA;AACA,WAAA,WAAA,GAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,sGAAA,SAAA;AAEA,WAAA,WAAA,CAAA,OAAA,CAAA,EAAA,EAAA,UAAA,KAAA,EAAA;AACA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,UAAA,EAAA,KAAA;;AACA,QAAA,KAAA,CAAA,WAAA,CAAA,SAAA,CAAA,OAAA,EAAA,UAAA,GAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,aAAA,EAAA,GAAA,CAAA,IAAA;;AAEA,UAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA,IAAA,CAAA;AACA,SAJA;AAKA,OARA,EAQA,UAAA,KAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,UAAA,EAAA,KAAA;AACA,QAAA,KAAA,CAAA,SAAA,GAAA,KAAA;AACA,OAXA;AAYA;AAnCA;AAdA,CAAA","sourcesContent":["<template>\n  <div id=\"app\">\n    유저이름:\n    <input v-model=\"userName\" type=\"text\">내용: <input v-model=\"message\" type=\"text\" @keyup=\"sendMessage\">\n    <div v-for=\"(item, idx) in recvList\" :key=\"idx\">\n      <h3>유저이름: {{ item.userName }}</h3>\n      <h3>내용: {{ item.content }}</h3>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Stomp from 'webstomp-client'\nimport SockJS from 'sockjs-client'\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      userName: \"\",\n      message: \"\",\n      recvList: []\n    }\n  },\n  created() {\n    this.connect();\n  },\n  components: {\n  },\n  methods: {\n    sendMessage(e) {\n      if (e.keyCode === 13 && this.userName && this.message) {\n        this.send();\n        this.message = '';\n      }\n    },\n    send() {\n      console.log(`Send message : ${this.message}`);\n      if (this.stompClient && this.stompClient.connected) {\n        const msg = {\n          username: this.username,\n          content: this.message,\n        };\n        this.stompClient.send(\"/receive\", JSON.stringify(msg));\n      }\n    },\n    connect() {\n      const serverURL = \"http://localhost:8080\"\n      let socket = new SockJS(serverURL);\n      this.stompClient = Stomp.over(socket);\n      console.log(`소켓 연결을 시도합니다. 서버 주소: ${serverURL}`)\n\n      this.stompClient.connect({}, frame => {\n        //소켓 연결 성공\n        console.log('소켓 연결 성공', frame);\n        this.stompClient.subscribe(\"/send\", res => {\n          console.log('구독으로 받은 메시지', res.body);\n\n          this.recvList.push(JSON.parse(res.body));\n        })\n      }, error => {\n        console.log('소켓 연결 실패', error);\n        this.connected = false;\n      })\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"sourceRoot":"src"}]}