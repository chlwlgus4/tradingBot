{"remainingRequest":"/Users/choijihyeon/IdeaProjects/trade_bot/node_modules/babel-loader/lib/index.js!/Users/choijihyeon/IdeaProjects/trade_bot/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/choijihyeon/IdeaProjects/trade_bot/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/choijihyeon/IdeaProjects/trade_bot/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/choijihyeon/IdeaProjects/trade_bot/src/App.vue","mtime":1633535731975},{"path":"/Users/choijihyeon/IdeaProjects/trade_bot/node_modules/cache-loader/dist/cjs.js","mtime":1633448507444},{"path":"/Users/choijihyeon/IdeaProjects/trade_bot/node_modules/babel-loader/lib/index.js","mtime":1631533208843},{"path":"/Users/choijihyeon/IdeaProjects/trade_bot/node_modules/cache-loader/dist/cjs.js","mtime":1633448507444},{"path":"/Users/choijihyeon/IdeaProjects/trade_bot/node_modules/vue-loader/lib/index.js","mtime":1633448521452}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IFN0b21wIGZyb20gJ3dlYnN0b21wLWNsaWVudCc7CmltcG9ydCBTb2NrSlMgZnJvbSAnc29ja2pzLWNsaWVudCc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnQXBwJywKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdXNlck5hbWU6ICIiLAogICAgICBtZXNzYWdlOiAiIiwKICAgICAgcmVjdkxpc3Q6IFtdCiAgICB9OwogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIC8vIEFwcC52dWXqsIAg7IOd7ISx65CY66m0IOyGjOy8kyDsl7DqsrDsnYQg7Iuc64+E7ZWp64uI64ukLgogICAgdGhpcy5jb25uZWN0KCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBvbktleVByZXNzOiBmdW5jdGlvbiBvbktleVByZXNzKGUpIHsKICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMTMgJiYgdGhpcy51c2VyTmFtZSAhPT0gJycgJiYgdGhpcy5tZXNzYWdlICE9PSAnJykgewogICAgICAgIHRoaXMuc2VuZCgpOwogICAgICAgIHRoaXMubWVzc2FnZSA9ICcnOwogICAgICB9CiAgICB9LAogICAgc2VuZE1lc3NhZ2U6IGZ1bmN0aW9uIHNlbmRNZXNzYWdlKCkgewogICAgICBpZiAodGhpcy5tZXNzYWdlKSB7CiAgICAgICAgdGhpcy5zZW5kKCk7CiAgICAgICAgdGhpcy5tZXNzYWdlID0gJyc7CiAgICAgIH0KICAgIH0sCiAgICBzZW5kOiBmdW5jdGlvbiBzZW5kKCkgewogICAgICBjb25zb2xlLmxvZygiU2VuZCBtZXNzYWdlOiIgKyB0aGlzLm1lc3NhZ2UpOwoKICAgICAgaWYgKHRoaXMuc3RvbXBDbGllbnQgJiYgdGhpcy5zdG9tcENsaWVudC5jb25uZWN0ZWQpIHsKICAgICAgICB2YXIgbXNnID0gewogICAgICAgICAgdXNlck5hbWU6IHRoaXMudXNlck5hbWUsCiAgICAgICAgICBjb250ZW50OiB0aGlzLm1lc3NhZ2UKICAgICAgICB9OwogICAgICAgIHRoaXMuc3RvbXBDbGllbnQuc2VuZCgiL3JlY2VpdmUiLCBKU09OLnN0cmluZ2lmeShtc2cpLCB7fSk7CiAgICAgIH0KICAgIH0sCiAgICBjb25uZWN0OiBmdW5jdGlvbiBjb25uZWN0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHNlcnZlclVSTCA9ICJodHRwOi8vbG9jYWxob3N0OjkwOTAiOwogICAgICB2YXIgc29ja2V0ID0gbmV3IFNvY2tKUyhzZXJ2ZXJVUkwpOwogICAgICB0aGlzLnN0b21wQ2xpZW50ID0gU3RvbXAub3Zlcihzb2NrZXQpOwogICAgICBjb25zb2xlLmxvZygiXHVDMThDXHVDRjEzIFx1QzVGMFx1QUNCMFx1Qzc0NCBcdUMyRENcdUIzQzRcdUQ1NjlcdUIyQzhcdUIyRTQuIFx1QzExQ1x1QkM4NCBcdUM4RkNcdUMxOEM6ICIuY29uY2F0KHNlcnZlclVSTCkpOwogICAgICB0aGlzLnN0b21wQ2xpZW50LmNvbm5lY3Qoe30sIGZ1bmN0aW9uIChmcmFtZSkgewogICAgICAgIC8vIOyGjOy8kyDsl7DqsrAg7ISx6rO1CiAgICAgICAgX3RoaXMuY29ubmVjdGVkID0gdHJ1ZTsKICAgICAgICBjb25zb2xlLmxvZygn7IaM7LyTIOyXsOqysCDshLHqs7UnLCBmcmFtZSk7IC8vIOyEnOuyhOydmCDrqZTsi5zsp4Ag7KCE7IahIGVuZHBvaW5066W8IOq1rOuPhe2VqeuLiOuLpC4KICAgICAgICAvLyDsnbTrn7DtmJXtg5zrpbwgcHViIHN1YiDqtazsobDrnbzqs6Ag7ZWp64uI64ukLgoKICAgICAgICBfdGhpcy5zdG9tcENsaWVudC5zdWJzY3JpYmUoIi9zZW5kIiwgZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgY29uc29sZS5sb2coJ+q1rOuPheycvOuhnCDrsJvsnYAg66mU7Iuc7KeAIOyeheuLiOuLpC4nLCByZXMuYm9keSk7IC8vIOuwm+ydgCDrjbDsnbTthLDrpbwganNvbuycvOuhnCDtjIzsi7HtlZjqs6Ag66as7Iqk7Yq47JeQIOuEo+yWtOykjeuLiOuLpC4KCiAgICAgICAgICBfdGhpcy5yZWN2TGlzdC5wdXNoKEpTT04ucGFyc2UocmVzLmJvZHkpKTsKICAgICAgICB9KTsKICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgLy8g7IaM7LyTIOyXsOqysCDsi6TtjKgKICAgICAgICBjb25zb2xlLmxvZygn7IaM7LyTIOyXsOqysCDsi6TtjKgnLCBlcnJvcik7CiAgICAgICAgX3RoaXMuY29ubmVjdGVkID0gZmFsc2U7CiAgICAgIH0pOwogICAgfQogIH0KfTs="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAcA,OAAA,KAAA,MAAA,iBAAA;AACA,OAAA,MAAA,MAAA,eAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,EADA;AAEA,MAAA,OAAA,EAAA,EAFA;AAGA,MAAA,QAAA,EAAA;AAHA,KAAA;AAKA,GARA;AASA,EAAA,OATA,qBASA;AACA;AACA,SAAA,OAAA;AACA,GAZA;AAaA,EAAA,OAAA,EAAA;AACA,IAAA,UADA,sBACA,CADA,EACA;AACA,UAAA,CAAA,CAAA,OAAA,KAAA,EAAA,IAAA,KAAA,QAAA,KAAA,EAAA,IAAA,KAAA,OAAA,KAAA,EAAA,EAAA;AACA,aAAA,IAAA;AACA,aAAA,OAAA,GAAA,EAAA;AACA;AACA,KANA;AAOA,IAAA,WAPA,yBAOA;AACA,UAAA,KAAA,OAAA,EAAA;AACA,aAAA,IAAA;AACA,aAAA,OAAA,GAAA,EAAA;AACA;AACA,KAZA;AAaA,IAAA,IAbA,kBAaA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,kBAAA,KAAA,OAAA;;AACA,UAAA,KAAA,WAAA,IAAA,KAAA,WAAA,CAAA,SAAA,EAAA;AACA,YAAA,GAAA,GAAA;AACA,UAAA,QAAA,EAAA,KAAA,QADA;AAEA,UAAA,OAAA,EAAA,KAAA;AAFA,SAAA;AAIA,aAAA,WAAA,CAAA,IAAA,CAAA,UAAA,EAAA,IAAA,CAAA,SAAA,CAAA,GAAA,CAAA,EAAA,EAAA;AACA;AACA,KAtBA;AAuBA,IAAA,OAvBA,qBAuBA;AAAA;;AACA,UAAA,SAAA,GAAA,uBAAA;AACA,UAAA,MAAA,GAAA,IAAA,MAAA,CAAA,SAAA,CAAA;AACA,WAAA,WAAA,GAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,sGAAA,SAAA;AACA,WAAA,WAAA,CAAA,OAAA,CACA,EADA,EAEA,UAAA,KAAA,EAAA;AACA;AACA,QAAA,KAAA,CAAA,SAAA,GAAA,IAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,UAAA,EAAA,KAAA,EAHA,CAIA;AACA;;AACA,QAAA,KAAA,CAAA,WAAA,CAAA,SAAA,CAAA,OAAA,EAAA,UAAA,GAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,kBAAA,EAAA,GAAA,CAAA,IAAA,EADA,CAGA;;AACA,UAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA,IAAA,CAAA;AACA,SALA;AAMA,OAdA,EAeA,UAAA,KAAA,EAAA;AACA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,UAAA,EAAA,KAAA;AACA,QAAA,KAAA,CAAA,SAAA,GAAA,KAAA;AACA,OAnBA;AAqBA;AAjDA;AAbA,CAAA","sourcesContent":["<template>\n  <div id=\"app\">\n    유저이름:\n    <input v-model=\"userName\" type=\"text\">내용: <input v-model=\"message\" type=\"text\" @keyup=\"onKeyPress\">\n    <button @click=\"sendMessage\">입력</button>\n    <div v-for=\"(item, idx) in recvList\" :key=\"idx\">\n      <h3>유저이름: {{ item.userName }}</h3>\n      <h3>내용: {{ item.content }}</h3>\n      <h3>내용: {{ process.env }}</h3>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Stomp from 'webstomp-client'\nimport SockJS from 'sockjs-client'\n\nexport default {\n  name: 'App',\n  data() {\n    return {\n      userName: \"\",\n      message: \"\",\n      recvList: []\n    }\n  },\n  created() {\n    // App.vue가 생성되면 소켓 연결을 시도합니다.\n    this.connect()\n  },\n  methods: {\n    onKeyPress(e) {\n      if(e.keyCode === 13 && this.userName !== '' && this.message !== ''){\n        this.send()\n        this.message = ''\n      }\n    },\n    sendMessage () {\n      if(this.message) {\n        this.send()\n        this.message = ''\n      }\n    },\n    send() {\n      console.log(\"Send message:\" + this.message);\n      if (this.stompClient && this.stompClient.connected) {\n        const msg = {\n          userName: this.userName,\n          content: this.message\n        };\n        this.stompClient.send(\"/receive\", JSON.stringify(msg), {});\n      }\n    },\n    connect() {\n      const serverURL = \"http://localhost:9090\"\n      let socket = new SockJS(serverURL);\n      this.stompClient = Stomp.over(socket);\n      console.log(`소켓 연결을 시도합니다. 서버 주소: ${serverURL}`)\n      this.stompClient.connect(\n          {},\n          frame => {\n            // 소켓 연결 성공\n            this.connected = true;\n            console.log('소켓 연결 성공', frame);\n            // 서버의 메시지 전송 endpoint를 구독합니다.\n            // 이런형태를 pub sub 구조라고 합니다.\n            this.stompClient.subscribe(\"/send\", res => {\n              console.log('구독으로 받은 메시지 입니다.', res.body);\n\n              // 받은 데이터를 json으로 파싱하고 리스트에 넣어줍니다.\n              this.recvList.push(JSON.parse(res.body))\n            });\n          },\n          error => {\n            // 소켓 연결 실패\n            console.log('소켓 연결 실패', error);\n            this.connected = false;\n          }\n      );\n    }\n  }\n}\n</script>"],"sourceRoot":"src"}]}